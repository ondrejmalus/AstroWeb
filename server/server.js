import express from "express";
import sqlite3 from "sqlite3";
import bcrypt from "bcrypt";
import session from "express-session";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "../"))); // slouÅ¾Ã­ statickÃ© soubory z AstroWeb koÅ™ene

app.use(session({
  secret: "tajneHesloProSession", // mÅ¯Å¾eÅ¡ zmÄ›nit
  resave: false,
  saveUninitialized: false
}));

// DatabÃ¡ze SQLite
const db = new sqlite3.Database(path.join(__dirname, "database.db"), err => {
  if (err) console.error(err);
  else console.log("âœ… PÅ™ipojeno k databÃ¡zi SQLite");
});

// Inicializace tabulky uÅ¾ivatelÅ¯
db.run(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    password TEXT,
    role TEXT DEFAULT 'user'
  )
`);

// ğŸ”¹ Registrace
app.post("/api/register", async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password)
    return res.status(400).json({ message: "VyplÅˆte vÅ¡echna pole." });

  const hashedPassword = await bcrypt.hash(password, 10);
  db.run(`INSERT INTO users (username, password) VALUES (?, ?)`, [username, hashedPassword], err => {
    if (err) {
      return res.status(400).json({ message: "UÅ¾ivatel uÅ¾ existuje." });
    }
    res.json({ message: "Registrace probÄ›hla ÃºspÄ›Å¡nÄ›!" });
  });
});

// ğŸ”¹ PÅ™ihlÃ¡Å¡enÃ­
app.post("/api/login", (req, res) => {
  const { username, password } = req.body;
  db.get(`SELECT * FROM users WHERE username = ?`, [username], async (err, user) => {
    if (err || !user)
      return res.status(400).json({ message: "NeplatnÃ© pÅ™ihlaÅ¡ovacÃ­ Ãºdaje." });

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(400).json({ message: "Å patnÃ© heslo." });

    req.session.user = { id: user.id, username: user.username, role: user.role };
    res.json({ message: "PÅ™ihlÃ¡Å¡enÃ­ ÃºspÄ›Å¡nÃ©.", role: user.role });
  });
});

// ğŸ”¹ OdhlÃ¡Å¡enÃ­
app.post("/api/logout", (req, res) => {
  req.session.destroy();
  res.json({ message: "OdhlÃ¡Å¡en." });
});

// ğŸ”¹ OvÄ›Å™enÃ­ pÅ™ihlÃ¡Å¡enÃ­
app.get("/api/me", (req, res) => {
  if (req.session.user) {
    res.json(req.session.user);
  } else {
    res.status(401).json({ message: "NepÅ™ihlÃ¡Å¡en." });
  }
});

// SpuÅ¡tÄ›nÃ­ serveru
app.listen(PORT, () => console.log(`ğŸš€ Server bÄ›Å¾Ã­ na http://localhost:${PORT}`));
